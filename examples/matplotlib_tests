>>> import matplotlib as mp
>>> import numpy as n
>>> mu, sigma = 200, 25
>>> x = mu + sigma*P.randn(10000)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'P' is not defined
>>> P=mp
>>> x = mu + sigma*P.randn(10000)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'randn'
>>> del(P)
>>> import pylab as P
>>> 
>>> x = mu + sigma*P.randn(10000)
>>> import matplotlib.pyplot as ppl
>>> fig=ppl.figure()
/usr/lib/python2.6/site-packages/matplotlib/backends/backend_gtk.py:639: DeprecationWarning: Use the new widget gtk.Tooltip
  self.tooltips = gtk.Tooltips()
>>> fig.hist(x)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Figure' object has no attribute 'hist'
>>> sub=fig.add_axes()
>>> sub.hist(x)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'hist'
>>> sub
>>> sub=fig.add_axes([0,0,1,1])
>>> sub
<matplotlib.axes.Axes object at 0xb77487ec>
>>> sub.hist(x)
(array([   5,   67,  394, 1455, 2737, 2879, 1786,  564,   96,   17]), array([  98.54690957,  118.31701572,  138.08712186,  157.85722801,
        177.62733415,  197.3974403 ,  217.16754644,  236.93765259,
        256.70775873,  276.47786488,  296.24797102]), <a list of 10 Patch objects>)
>>> fig.plot()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Figure' object has no attribute 'plot'
>>> fig.show()
>>> sub
<matplotlib.axes.Axes object at 0xb77487ec>
>>> sub.get_patches()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Axes' object has no attribute 'get_patches'
>>> sub.patches()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not callable
>>> sub.patches
[<matplotlib.patches.Rectangle object at 0x98e3cac>, <matplotlib.patches.Rectangle object at 0x98e3eec>, <matplotlib.patches.Rectangle object at 0x98e82cc>, <matplotlib.patches.Rectangle object at 0x98e860c>, <matplotlib.patches.Rectangle object at 0x98e894c>, <matplotlib.patches.Rectangle object at 0x98e8c8c>, <matplotlib.patches.Rectangle object at 0x98e8fcc>, <matplotlib.patches.Rectangle object at 0x98f032c>, <matplotlib.patches.Rectangle object at 0x98f066c>, <matplotlib.patches.Rectangle object at 0x98f09ac>]
>>> ps=sub.patches
>>> ps[0]
<matplotlib.patches.Rectangle object at 0x98e3cac>
>>> p0=ps[0]
>>> p0.getp()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Rectangle' object has no attribute 'getp'
>>> mp.artist.getp()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: getp() takes at least 1 argument (0 given)
>>> mp.artist.getp(p0)
    aa = True
    alpha = 1.0
    animated = False
    antialiased or aa = True
    axes = Axes(0,0;1x1)
    bbox = Bbox(array([[  98.54690957,    0.        ],       ...
    children = []
    clip_box = TransformedBbox(Bbox(array([[ 0.,  0.],        [ 1...
    clip_on = True
    clip_path = None
    contains = None
    data_transform = CompositeGenericTransform(TransformWrapper(Blended...
    ec = k
    edgecolor or ec = k
    extents = Bbox(array([[ 124.28008851,    0.        ],       ...
    facecolor or fc = [ 0.  0.  1.  1.]
    fc = [ 0.  0.  1.  1.]
    figure = Figure(640x480)
    fill = True
    hatch = None
    height = 5
    label = 
    linestyle or ls = solid
    linewidth or lw = 1.0
    ls = solid
    lw = 1.0
    patch_transform = BboxTransformTo(Bbox(array([[  98.54690957,    0. ...
    path = Path([[ 0.  0.]  [ 1.  0.]  [ 1.  1.]  [ 0.  1.]  ...
    picker = None
    snap = None
    transform = CompositeGenericTransform(BboxTransformTo(Bbox(arr...
    transformed_clip_path_and_affine = (None, None)
    url = None
    verts = [[ 124.28008851    0.        ]  [ 174.89156024    ...
    visible = True
    width = 19.7701061447
    window_extent = Bbox(array([[ 124.28008851,    0.        ],       ...
    x = 98.5469095728
    xy = (98.546909572809454, 0)
    y = 0
    zorder = 1
>>> p0.get_fill
<bound method Rectangle.get_fill of <matplotlib.patches.Rectangle object at 0x98e3cac>>
>>> p0.get_fill()
True
>>> p0.get_fc()
array([ 0.,  0.,  1.,  1.])
>>> p0.get_facecolor()
array([ 0.,  0.,  1.,  1.])
>>> p0.get_facecolors()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Rectangle' object has no attribute 'get_facecolors'
>>> p0=ps[7]
>>> mp.artist.getp(p7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'p7' is not defined
>>> mp.artist.getp(p0)
    aa = True
    alpha = 1.0
    animated = False
    antialiased or aa = True
    axes = Axes(0,0;1x1)
    bbox = Bbox(array([[ 236.93765259,    0.        ],       ...
    children = []
    clip_box = TransformedBbox(Bbox(array([[ 0.,  0.],        [ 1...
    clip_on = True
    clip_path = None
    contains = None
    data_transform = CompositeGenericTransform(TransformWrapper(Blended...
    ec = k
    edgecolor or ec = k
    extents = Bbox(array([[ 478.56039062,    0.        ],       ...
    facecolor or fc = [ 0.  0.  1.  1.]
    fc = [ 0.  0.  1.  1.]
    figure = Figure(640x480)
    fill = True
    hatch = None
    height = 564
    label = _nolegend_
    linestyle or ls = solid
    linewidth or lw = 1.0
    ls = solid
    lw = 1.0
    patch_transform = BboxTransformTo(Bbox(array([[ 236.93765259,    0. ...
    path = Path([[ 0.  0.]  [ 1.  0.]  [ 1.  1.]  [ 0.  1.]  ...
    picker = None
    snap = None
    transform = CompositeGenericTransform(BboxTransformTo(Bbox(arr...
    transformed_clip_path_and_affine = (None, None)
    url = None
    verts = [[ 478.56039062    0.        ]  [ 529.17186235    ...
    visible = True
    width = 19.7701061447
    window_extent = Bbox(array([[ 478.56039062,    0.        ],       ...
    x = 236.937652586
    xy = (236.93765258564918, 0)
    y = 0
    zorder = 1
>>> p0.visible
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Rectangle' object has no attribute 'visible'
>>> p0.get_visible
<bound method Rectangle.get_visible of <matplotlib.patches.Rectangle object at 0x98f032c>>
>>> p0.get_visible()
True
>>> p0.set_visible()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: set_visible() takes exactly 2 arguments (1 given)
>>> p0.set_visible(False)
>>> fig.show()
>>> mp.artist.getp(p0)
    aa = True
    alpha = 1.0
    animated = False
    antialiased or aa = True
    axes = Axes(0,0;1x1)
    bbox = Bbox(array([[ 236.93765259,    0.        ],       ...
    children = []
    clip_box = TransformedBbox(Bbox(array([[ 0.,  0.],        [ 1...
    clip_on = True
    clip_path = None
    contains = None
    data_transform = CompositeGenericTransform(TransformWrapper(Blended...
    ec = k
    edgecolor or ec = k
    extents = Bbox(array([[ 478.56039062,    0.        ],       ...
    facecolor or fc = [ 0.  0.  1.  1.]
    fc = [ 0.  0.  1.  1.]
    figure = Figure(640x480)
    fill = True
    hatch = None
    height = 564
    label = _nolegend_
    linestyle or ls = solid
    linewidth or lw = 1.0
    ls = solid
    lw = 1.0
    patch_transform = BboxTransformTo(Bbox(array([[ 236.93765259,    0. ...
    path = Path([[ 0.  0.]  [ 1.  0.]  [ 1.  1.]  [ 0.  1.]  ...
    picker = None
    snap = None
    transform = CompositeGenericTransform(BboxTransformTo(Bbox(arr...
    transformed_clip_path_and_affine = (None, None)
    url = None
    verts = [[ 478.56039062    0.        ]  [ 529.17186235    ...
    visible = False
    width = 19.7701061447
    window_extent = Bbox(array([[ 478.56039062,    0.        ],       ...
    x = 236.937652586
    xy = (236.93765258564918, 0)
    y = 0
    zorder = 1
>>> p0
<matplotlib.patches.Rectangle object at 0x98f032c>
>>> sub.figure.canvas.draw()
>>> p0.set_visible(True)
>>> fig.show()
>>> sub.figure.canvas.draw()
>>> p0.get_fc
<bound method Rectangle.get_facecolor of <matplotlib.patches.Rectangle object at 0x98f032c>>
>>> p0.get_fc()
array([ 0.,  0.,  1.,  1.])
>>> orig=p0.get_fc()
>>> new=orig.copy
>>> new=orig.copy()
>>> new
array([ 0.,  0.,  1.,  1.])
>>> new[0]=0.5
>>> new
array([ 0.5,  0. ,  1. ,  1. ])
>>> orig=p0.set_fc(new)
>>> sub.figure.canvas.draw()
>>> sub.bins
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Axes' object has no attribute 'bins'
>>> sub.bins()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Axes' object has no attribute 'bins'
>>> nn,bins,pas=sub.hist(x)
>>> sub.figure.canvas.draw()
>>> sub.figure.canvas.draw()
>>> nn,bins,pas=sub.hist(x)
>>> sub.figure.canvas.draw()
>>> bins
array([  98.54690957,  118.31701572,  138.08712186,  157.85722801,
        177.62733415,  197.3974403 ,  217.16754644,  236.93765259,
        256.70775873,  276.47786488,  296.24797102])
>>> n
<module 'numpy' from '/usr/lib/python2.6/site-packages/numpy/__init__.pyc'>
>>> nn
array([   5,   67,  394, 1455, 2737, 2879, 1786,  564,   96,   17])
>>> bb=bins[7]
>>> orig=p0.set_fc(new)
>>> sub.figure.canvas.draw()
>>> new
array([ 0.5,  0. ,  1. ,  1. ])
>>> pas[7].set_fc(new)
>>> sub.figure.canvas.draw()
>>> import matplotlib.cm as cm
>>> cmap=cm.jet
>>> 
>>> a=bins.reshape(bins.shape[0],1)
>>> ppl.pcolor(a,cmap=cmap)
<matplotlib.collections.PolyCollection object at 0x98e8dac>
>>> newc=ppl.pcolor(a,cmap=cmap)
>>> newc.get_facecolors()
array([[ 0.        ,  0.        ,  0.5       ,  1.        ],
       [ 0.        ,  0.        ,  0.9456328 ,  1.        ],
       [ 0.        ,  0.3       ,  1.        ,  1.        ],
       [ 0.        ,  0.69215686,  1.        ,  1.        ],
       [ 0.16129032,  1.        ,  0.80645161,  1.        ],
       [ 0.49019608,  1.        ,  0.47754586,  1.        ],
       [ 0.80645161,  1.        ,  0.16129032,  1.        ],
       [ 1.        ,  0.77051561,  0.        ,  1.        ],
       [ 1.        ,  0.40740741,  0.        ,  1.        ],
       [ 0.9456328 ,  0.02977487,  0.        ,  1.        ],
       [ 0.5       ,  0.        ,  0.        ,  1.        ]])
>>> fcs=newc.get_facecolors()
>>> for i in xrange(bins.size):
...   pas[i].set_facecolor(fcs[i])
...   print i
>>> fcs.shape
(11, 4)
>>> len(pas)
10
>>> avgbins=(bins[1:]+bins[0:-1])/2
>>> a=avgbins.reshape(avgbins.shape[0],1)
>>> newc=ppl.pcolor(a,cmap=cmap)
>>> fcs=newc.get_facecolors()
>>> for i in xrange(avgbins.size):
...   pas[i].set_facecolor(fcs[i])




import matplotlib as mp
import numpy as n
mu, sigma = 200, 25
import pylab as P
x = mu + sigma*P.randn(10000)
x = mu + sigma*P.randn(10)
import matplotlib.pyplot as ppl
fig=ppl.figure()
sub=fig.add_axes([0,0,1,1])
sub.hist(x)
fig.show()
ps=sub.patches
p0=ps[0]
mp.artist.getp(p0)
p0.get_fc()
p0.get_facecolor()
p0=ps[7]
p0.get_visible()
p0.set_visible(False)
sub.figure.canvas.draw()
p0.set_visible(True)
sub.figure.canvas.draw()
p0.get_fc()
orig=p0.get_fc()
new=orig.copy()
new[0]=0.5
new
orig=p0.set_fc(new)
sub.figure.canvas.draw()
nn,bins,pas=sub.hist(x)
sub.figure.canvas.draw()
bins
nn
bb=bins[7]
pas[7].set_fc(new)
sub.figure.canvas.draw()
import matplotlib.cm as cm
cmap=cm.jet
bins.shape
a=bins.reshape(bins.shape[0],1)
newc=ppl.pcolor(a,cmap=cmap)
sub.figure.canvas.draw()
fcs=newc.get_facecolors()

avgbins=(bins[1:]+bins[0:-1])/2
a=avgbins.reshape(avgbins.shape[0],1)
newc=ppl.pcolor(a,cmap=cmap)
sub.figure.canvas.draw()
fcs=newc.get_facecolors()
for i in xrange(avgbins.size):
   pas[i].set_facecolor(fcs[i])

sub.figure.canvas.draw()


>>> fcs.size
4
>>> newc.size
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'PolyCollection' object has no attribute 'size'
>>> newc
<matplotlib.collections.PolyCollection object at 0x99c122c>
>>> newc.get_facecolors()
array([[ 0.,  0.,  1.,  1.]])
>>> a
array([[ 108.43196265],
       [ 128.20206879],
       [ 147.97217493],
       [ 167.74228108],
       [ 187.51238722],
       [ 207.28249337],
       [ 227.05259951],
       [ 246.82270566],
       [ 266.5928118 ],
       [ 286.36291795]])
>>> cmap
<matplotlib.colors.LinearSegmentedColormap instance at 0x92e420c>
>>> newc=ppl.pcolor(a,cmap=cmap)
>>> newc.get_facecolors().shape()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object is not callable
>>> newc.get_facecolors().shape
(1, 4)
>>> a.shape()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object is not callable
>>> a.shape
(10, 1)
>>> a
array([[ 108.43196265],
       [ 128.20206879],
       [ 147.97217493],
       [ 167.74228108],
       [ 187.51238722],
       [ 207.28249337],
       [ 227.05259951],
       [ 246.82270566],
       [ 266.5928118 ],
       [ 286.36291795]])
>>> bins
array([  98.54690957,  118.31701572,  138.08712186,  157.85722801,
        177.62733415,  197.3974403 ,  217.16754644,  236.93765259,
        256.70775873,  276.47786488,  296.24797102])
>>> newc=ppl.pcolor(a,cmap=cmap)
>>> help(newc)

>>> newc.get_facecolor().shape
(1, 4)
>>> newc.get_facecolors().shape
(1, 4)
>>> 
You have new mail in /var/spool/mail/stdweird
[stdweird@spike ~]$ python
Python 2.6.2 (r262:71600, Jan 25 2010, 18:46:45) 
[GCC 4.4.2 20091222 (Red Hat 4.4.2-20)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import matplotlib as mp
>>> import numpy as n
>>> mu, sigma = 200, 25
>>> x = mu + sigma*P.randn(10000)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'P' is not defined
>>> import pylab as P
>>> x = mu + sigma*P.randn(10000)
>>> import matplotlib.pyplot as ppl
>>> fig=ppl.figure()
/usr/lib/python2.6/site-packages/matplotlib/backends/backend_gtk.py:639: DeprecationWarning: Use the new widget gtk.Tooltip
  self.tooltips = gtk.Tooltips()
>>> fig.hist(x)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Figure' object has no attribute 'hist'
>>> sub=fig.add_axes([0,0,1,1])
>>> nn,bins,pas=sub.hist(x)
>>> avgbins=(bins[1:]+bins[0:-1])/2
>>> a=avgbins.reshape(avgbins.shape[0],1)
>>> a
array([[ 122.81162034],
       [ 140.42851247],
       [ 158.0454046 ],
       [ 175.66229673],
       [ 193.27918885],
       [ 210.89608098],
       [ 228.51297311],
       [ 246.12986523],
       [ 263.74675736],
       [ 281.36364949]])
>>> newc=ppl.pcolor(a,cmap=cmap)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'cmap' is not defined
>>> import matplotlib.cm as cm
>>> cmap=cm.jet
>>> newc=ppl.pcolor(a,cmap=cmap)
>>> fcs=newc.get_facecolors()
>>> fcs
array([[ 0.,  0.,  1.,  1.]])
>>> a2=bins.reshape(bins.shape[0],1)
>>> a2
array([[ 114.00317428],
       [ 131.62006641],
       [ 149.23695854],
       [ 166.85385066],
       [ 184.47074279],
       [ 202.08763492],
       [ 219.70452704],
       [ 237.32141917],
       [ 254.9383113 ],
       [ 272.55520342],
       [ 290.17209555]])
>>> newc2=ppl.pcolor(a2,cmap=cmap)
>>> fcs2=newc2.get_facecolors()
>>> fcs2
array([[ 0.,  0.,  1.,  1.]])
>>> bins
array([ 114.00317428,  131.62006641,  149.23695854,  166.85385066,
        184.47074279,  202.08763492,  219.70452704,  237.32141917,
        254.9383113 ,  272.55520342,  290.17209555])
>>> avgbins
array([ 122.81162034,  140.42851247,  158.0454046 ,  175.66229673,
        193.27918885,  210.89608098,  228.51297311,  246.12986523,
        263.74675736,  281.36364949])
>>> newc
<matplotlib.collections.PolyCollection object at 0x9cd73ac>
>>> ppl.pcolor(a,cmap=cmap)
<matplotlib.collections.PolyCollection object at 0x9e3f7cc>
>>> newc3=ppl.pcolor(a,cmap=cmap)
>>> newc3
<matplotlib.collections.PolyCollection object at 0x9e3fcec>
>>> newc3.get_fc
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'PolyCollection' object has no attribute 'get_fc'
>>> newc3.get_facecolors()
array([[ 0.,  0.,  1.,  1.]])
>>> fig.show()
>>> newc3=ppl.pcolor(a,cmap=cmap)
>>> newc3.get_facecolors()
array([[ 0.,  0.,  1.,  1.]])
>>> a
array([[ 122.81162034],
       [ 140.42851247],
       [ 158.0454046 ],
       [ 175.66229673],
       [ 193.27918885],
       [ 210.89608098],
       [ 228.51297311],
       [ 246.12986523],
       [ 263.74675736],
       [ 281.36364949]])
>>> cmap
<matplotlib.colors.LinearSegmentedColormap instance at 0x982b1ec>
>>> a2=bins.reshape(1,bins.shape[0])
>>> newc3=ppl.pcolor(a2,cmap=cmap)
>>> newc3.get_facecolors()
array([[ 0.,  0.,  1.,  1.]])
>>> newc4=ppl.pcolor(rand(10,10),cmap=cmap)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'rand' is not defined
>>> from pylab import rand
>>> newc4=ppl.pcolor(rand(10,10),cmap=cmap)
>>> newc4.get_facecolors()
array([[ 0.,  0.,  1.,  1.]])
>>> cmap
<matplotlib.colors.LinearSegmentedColormap instance at 0x982b1ec>
>>> cmap=cm.hot
>>> cmap=cm.hot()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: __call__() takes at least 2 arguments (1 given)
>>> cmap=cm.hot
>>> newc4=ppl.pcolor(rand(10,10),cmap=cmap)
>>> newc4.get_facecolors()
array([[ 0.,  0.,  1.,  1.]])
>>> rand(10,10)
array([[ 0.29455386,  0.15450923,  0.67443745,  0.57241898,  0.33967573,
         0.90075504,  0.59204724,  0.17385804,  0.10169217,  0.12358221],
       [ 0.74504333,  0.4810522 ,  0.14058561,  0.40139901,  0.31395384,
         0.10188736,  0.26510462,  0.88952053,  0.84313786,  0.12644399],
       [ 0.25609057,  0.70245487,  0.63313026,  0.60763435,  0.165976  ,
         0.00271627,  0.12302756,  0.32183718,  0.72271909,  0.56262186],
       [ 0.60193573,  0.46691953,  0.71062384,  0.68391347,  0.09577907,
         0.23027698,  0.02518889,  0.20191876,  0.03467674,  0.02402741],
       [ 0.52731349,  0.75367362,  0.75238372,  0.93941279,  0.77444672,
         0.54827674,  0.37265437,  0.63938985,  0.82306827,  0.94018932],
       [ 0.64834294,  0.66250169,  0.64009452,  0.98058261,  0.32968937,
         0.19011487,  0.28208511,  0.94405318,  0.06517035,  0.11935145],
       [ 0.73881168,  0.77509579,  0.81029329,  0.21581485,  0.06445257,
         0.6929537 ,  0.63349394,  0.61540237,  0.80741278,  0.98158802],
       [ 0.28975881,  0.49783416,  0.27323391,  0.38756082,  0.95771856,
         0.31983816,  0.26274606,  0.98897282,  0.88375531,  0.77929489],
       [ 0.71729052,  0.36685555,  0.48124928,  0.4000072 ,  0.35217278,
         0.06248883,  0.46702603,  0.04719011,  0.90028942,  0.74395935],
       [ 0.30518786,  0.61854032,  0.92004546,  0.85749084,  0.74074888,
         0.80648308,  0.75415061,  0.33323083,  0.01943588,  0.1616604 ]])
>>> newc4=ppl.pcolor(rand(10,10))
>>> newc4.get_facecolors()
array([[ 0.,  0.,  1.,  1.]])
>>> from pylab import pcolor
>>> r=rand(10,10)
>>> newc=pcolor(r)
>>> newc
<matplotlib.collections.PolyCollection object at 0x9ef1e2c>
>>> newc.get_fc
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'PolyCollection' object has no attribute 'get_fc'
>>> newc.get_fc()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'PolyCollection' object has no attribute 'get_fc'
>>> newc.get_facecolors()
array([[ 0.,  0.,  1.,  1.]])
>>> newc.get_facecolors
<bound method PolyCollection.get_facecolor of <matplotlib.collections.PolyCollection object at 0x9ef1e2c>>
>>> newc.get_facecolors()
array([[ 0.,  0.,  1.,  1.]])

